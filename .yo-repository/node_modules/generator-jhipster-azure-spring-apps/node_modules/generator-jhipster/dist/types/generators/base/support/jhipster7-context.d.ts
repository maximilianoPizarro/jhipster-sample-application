export function createJHipster7Context(generator: any, data: any, options: any): any;
export namespace jhipster7deprecatedProperties {
    namespace devDatabaseType {
        let behaviorOnlyReason: string;
        function get({ data }: {
            data: any;
        }): any;
    }
    namespace prodDatabaseType {
        let behaviorOnlyReason_1: string;
        export { behaviorOnlyReason_1 as behaviorOnlyReason };
        export function get_1({ data }: {
            data: any;
        }): any;
        export { get_1 as get };
    }
    namespace GRADLE_VERSION {
        export let replacement: string;
        export function get_2({ data }: {
            data: any;
        }): any;
        export { get_2 as get };
    }
    namespace NODE_VERSION {
        let replacement_1: string;
        export { replacement_1 as replacement };
        export function get_3({ data }: {
            data: any;
        }): any;
        export { get_3 as get };
    }
    namespace NPM_VERSION {
        let replacement_2: string;
        export { replacement_2 as replacement };
        export function get_4({ data }: {
            data: any;
        }): any;
        export { get_4 as get };
    }
    namespace JHIPSTER_DEPENDENCIES_VERSION {
        let replacement_3: string;
        export { replacement_3 as replacement };
        export function get_5({ data }: {
            data: any;
        }): any;
        export { get_5 as get };
    }
    namespace JAVA_VERSION {
        let replacement_4: string;
        export { replacement_4 as replacement };
        export function get_6({ data }: {
            data: any;
        }): any;
        export { get_6 as get };
    }
    namespace JAVA_COMPATIBLE_VERSIONS {
        let replacement_5: string;
        export { replacement_5 as replacement };
        export function get_7({ data }: {
            data: any;
        }): any;
        export { get_7 as get };
    }
    namespace SPRING_BOOT_VERSION {
        let replacement_6: string;
        export { replacement_6 as replacement };
        export function get_8({ data }: {
            data: any;
        }): any;
        export { get_8 as get };
    }
    namespace DOCKER_DIR {
        let replacement_7: string;
        export { replacement_7 as replacement };
        export function get_9({ data }: {
            data: any;
        }): any;
        export { get_9 as get };
    }
    namespace CLIENT_MAIN_SRC_DIR {
        let replacement_8: string;
        export { replacement_8 as replacement };
        export function get_10({ data }: {
            data: any;
        }): any;
        export { get_10 as get };
    }
    namespace CLIENT_TEST_SRC_DIR {
        let replacement_9: string;
        export { replacement_9 as replacement };
        export function get_11({ data }: {
            data: any;
        }): any;
        export { get_11 as get };
    }
    namespace CLIENT_DIST_DIR {
        let replacement_10: string;
        export { replacement_10 as replacement };
        export function get_12({ data }: {
            data: any;
        }): any;
        export { get_12 as get };
    }
    namespace BUILD_DIR {
        let replacement_11: string;
        export { replacement_11 as replacement };
        export function get_13({ data }: {
            data: any;
        }): any;
        export { get_13 as get };
    }
    namespace MAIN_SRC_DIR {
        let replacement_12: string;
        export { replacement_12 as replacement };
        export function get_14({ data }: {
            data: any;
        }): any;
        export { get_14 as get };
    }
    namespace DIST_DIR {
        let replacement_13: string;
        export { replacement_13 as replacement };
        export function get_15({ data }: {
            data: any;
        }): any;
        export { get_15 as get };
    }
    namespace userPrimaryKeyTypeString {
        let replacement_14: string;
        export { replacement_14 as replacement };
        export function get_16({ data }: {
            data: any;
        }): any;
        export { get_16 as get };
    }
    namespace userPrimaryKeyTypeUUID {
        let replacement_15: string;
        export { replacement_15 as replacement };
        export function get_17({ data }: {
            data: any;
        }): any;
        export { get_17 as get };
    }
    namespace _getClientTranslation {
        let replacement_16: string;
        export { replacement_16 as replacement };
        export function get_18({ data }: {
            data: any;
        }): any;
        export { get_18 as get };
    }
    namespace _getEntityClientTranslation {
        let replacement_17: string;
        export { replacement_17 as replacement };
        export function get_19({ data }: {
            data: any;
        }): any;
        export { get_19 as get };
    }
    namespace testsNeedCsrf {
        let replacement_18: string;
        export { replacement_18 as replacement };
        export function get_20({ data }: {
            data: any;
        }): any;
        export { get_20 as get };
    }
    namespace haveFieldWithJavadoc {
        let replacement_19: string;
        export { replacement_19 as replacement };
        export function get_21({ data }: {
            data: any;
        }): any;
        export { get_21 as get };
    }
    namespace fieldsContainBigDecimal {
        let replacement_20: string;
        export { replacement_20 as replacement };
        export function get_22({ data }: {
            data: any;
        }): any;
        export { get_22 as get };
    }
    namespace fieldsContainBlob {
        let replacement_21: string;
        export { replacement_21 as replacement };
        export function get_23({ data }: {
            data: any;
        }): any;
        export { get_23 as get };
    }
    namespace fieldsContainDate {
        let replacement_22: string;
        export { replacement_22 as replacement };
        export function get_24({ data }: {
            data: any;
        }): any;
        export { get_24 as get };
    }
    namespace fieldsContainDuration {
        let replacement_23: string;
        export { replacement_23 as replacement };
        export function get_25({ data }: {
            data: any;
        }): any;
        export { get_25 as get };
    }
    namespace fieldsContainInstant {
        let replacement_24: string;
        export { replacement_24 as replacement };
        export function get_26({ data }: {
            data: any;
        }): any;
        export { get_26 as get };
    }
    namespace fieldsContainLocalDate {
        let replacement_25: string;
        export { replacement_25 as replacement };
        export function get_27({ data }: {
            data: any;
        }): any;
        export { get_27 as get };
    }
    namespace fieldsContainTimed {
        let replacement_26: string;
        export { replacement_26 as replacement };
        export function get_28({ data }: {
            data: any;
        }): any;
        export { get_28 as get };
    }
    namespace fieldsContainUUID {
        let replacement_27: string;
        export { replacement_27 as replacement };
        export function get_29({ data }: {
            data: any;
        }): any;
        export { get_29 as get };
    }
    namespace fieldsContainZonedDateTime {
        let replacement_28: string;
        export { replacement_28 as replacement };
        export function get_30({ data }: {
            data: any;
        }): any;
        export { get_30 as get };
    }
    namespace fieldsContainImageBlob {
        let replacement_29: string;
        export { replacement_29 as replacement };
        export function get_31({ data }: {
            data: any;
        }): any;
        export { get_31 as get };
    }
    namespace fieldsContainTextBlob {
        let replacement_30: string;
        export { replacement_30 as replacement };
        export function get_32({ data }: {
            data: any;
        }): any;
        export { get_32 as get };
    }
    namespace fieldsContainBlobOrImage {
        let replacement_31: string;
        export { replacement_31 as replacement };
        export function get_33({ data }: {
            data: any;
        }): any;
        export { get_33 as get };
    }
    namespace validation {
        let replacement_32: string;
        export { replacement_32 as replacement };
        export function get_34({ data }: {
            data: any;
        }): any;
        export { get_34 as get };
    }
    namespace dependabotPackageJson {
        let replacement_33: string;
        export { replacement_33 as replacement };
        export function get_35({ data }: {
            data: any;
        }): {
            dependencies: any;
            devDependencies: any;
        };
        export { get_35 as get };
    }
    namespace cacheManagerIsAvailable {
        let replacement_34: string;
        export { replacement_34 as replacement };
        export function get_36({ data }: {
            data: any;
        }): any;
        export { get_36 as get };
    }
    namespace enableLiquibase {
        let replacement_35: string;
        export { replacement_35 as replacement };
        export function get_37({ data }: {
            data: any;
        }): any;
        export { get_37 as get };
    }
    namespace databaseTypePostgres {
        let replacement_36: string;
        export { replacement_36 as replacement };
        export function get_38({ data }: {
            data: any;
        }): any;
        export { get_38 as get };
    }
    namespace prodDatabaseTypePostgres {
        let replacement_37: string;
        export { replacement_37 as replacement };
        export function get_39({ data }: {
            data: any;
        }): any;
        export { get_39 as get };
    }
    namespace databaseTypeMariadb {
        let replacement_38: string;
        export { replacement_38 as replacement };
        export function get_40({ data }: {
            data: any;
        }): any;
        export { get_40 as get };
    }
    namespace databaseTypeMysql {
        let replacement_39: string;
        export { replacement_39 as replacement };
        export function get_41({ data }: {
            data: any;
        }): any;
        export { get_41 as get };
    }
    namespace databaseTypeOracle {
        let replacement_40: string;
        export { replacement_40 as replacement };
        export function get_42({ data }: {
            data: any;
        }): any;
        export { get_42 as get };
    }
    namespace databaseTypeMssql {
        let replacement_41: string;
        export { replacement_41 as replacement };
        export function get_43({ data }: {
            data: any;
        }): any;
        export { get_43 as get };
    }
    namespace cacheProviderEhCache {
        let replacement_42: string;
        export { replacement_42 as replacement };
        export function get_44({ data }: {
            data: any;
        }): any;
        export { get_44 as get };
    }
    namespace getJDBCUrl {
        let replacement_43: string;
        export { replacement_43 as replacement };
        export function get_45(): typeof getJdbcUrl;
        export { get_45 as get };
    }
    namespace getR2DBCUrl {
        let replacement_44: string;
        export { replacement_44 as replacement };
        export function get_46(): typeof getR2dbcUrl;
        export { get_46 as get };
    }
    namespace getDBCExtraOption {
        let replacement_45: string;
        export { replacement_45 as replacement };
        export function get_47(): (databaseType: any) => string;
        export { get_47 as get };
    }
    namespace getPrimaryKeyValue {
        let replacement_46: string;
        export { replacement_46 as replacement };
        export function get_48(): (primaryKey: string, databaseType: string, defaultValue?: number) => string;
        export { get_48 as get };
    }
    namespace getJoinTableName {
        let replacement_47: string;
        export { replacement_47 as replacement };
        export function get_49(): (...args: any[]) => string;
        export { get_49 as get };
    }
    namespace getJavaValueGeneratorForType {
        let replacement_48: string;
        export { replacement_48 as replacement };
        export function get_50(): (type: any) => string;
        export { get_50 as get };
    }
    namespace asEntity {
        let replacement_49: string;
        export { replacement_49 as replacement };
        export function get_51({ data }: {
            data: any;
        }): (name: any) => string;
        export { get_51 as get };
    }
    namespace asDto {
        let replacement_50: string;
        export { replacement_50 as replacement };
        export function get_52({ data }: {
            data: any;
        }): (name: any) => string;
        export { get_52 as get };
    }
    namespace upperFirstCamelCase {
        let replacement_51: string;
        export { replacement_51 as replacement };
        export function get_53(): typeof upperFirstCamelCase;
        export { get_53 as get };
    }
    namespace hasOauthUser {
        let replacement_52: string;
        export { replacement_52 as replacement };
        export function get_54({ data }: {
            data: any;
        }): any;
        export { get_54 as get };
    }
    namespace getPrettierExtensions {
        let replacement_53: string;
        export { replacement_53 as replacement };
        export function get_55({ data }: {
            data: any;
        }): () => any;
        export { get_55 as get };
    }
    namespace _generateSqlSafeName {
        let replacement_54: string;
        export { replacement_54 as replacement };
        export function get_56(): (name: any) => any;
        export { get_56 as get };
    }
    namespace isFilterableType {
        let replacement_55: string;
        export { replacement_55 as replacement };
        export function get_57(): (fieldType: any) => boolean;
        export { get_57 as get };
    }
    namespace getSpecificationBuilder {
        let replacement_56: string;
        export { replacement_56 as replacement };
        export function get_58(): (fieldType: string) => "buildRangeSpecification" | "buildStringSpecification" | "buildSpecification";
        export { get_58 as get };
    }
    namespace getColumnName {
        let replacement_57: string;
        export { replacement_57 as replacement };
        export function get_59(): typeof hibernateSnakeCase;
        export { get_59 as get };
    }
    namespace isUsingBuiltInUser {
        let replacement_58: string;
        export { replacement_58 as replacement };
        export function get_60({ data }: {
            data: any;
        }): () => any;
        export { get_60 as get };
    }
    namespace isUsingBuiltInAuthority {
        let replacement_59: string;
        export { replacement_59 as replacement };
        export function get_61({ data }: {
            data: any;
        }): () => any;
        export { get_61 as get };
    }
    namespace jhipsterConfig {
        let replacement_60: string;
        export { replacement_60 as replacement };
        export function get_62({ generator }: {
            generator: any;
        }): any;
        export { get_62 as get };
    }
    namespace configOptions {
        let replacement_61: string;
        export { replacement_61 as replacement };
        export function get_63(): {};
        export { get_63 as get };
    }
}
import { getJdbcUrl } from '../../spring-data-relational/support/database-url.js';
import { getR2dbcUrl } from '../../spring-data-relational/support/database-url.js';
import { upperFirstCamelCase as upperFirstCamelCase_1 } from './string.js';
import { hibernateSnakeCase } from '../../server/support/index.js';
